// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package grpcserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Periods int32

const (
	Periods_DAY   Periods = 0
	Periods_WEEK  Periods = 1
	Periods_MONTH Periods = 2
)

var Periods_name = map[int32]string{
	0: "DAY",
	1: "WEEK",
	2: "MONTH",
}

var Periods_value = map[string]int32{
	"DAY":   0,
	"WEEK":  1,
	"MONTH": 2,
}

func (x Periods) String() string {
	return proto.EnumName(Periods_name, int32(x))
}

func (Periods) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

// Событие
type Event struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Duration             *duration.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Author               string               `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Description          string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Notify               *duration.Duration   `protobuf:"bytes,7,opt,name=notify,proto3" json:"notify,omitempty"`
	Reminded             bool                 `protobuf:"varint,8,opt,name=reminded,proto3" json:"reminded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Event) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Event) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetNotify() *duration.Duration {
	if m != nil {
		return m.Notify
	}
	return nil
}

func (m *Event) GetReminded() bool {
	if m != nil {
		return m.Reminded
	}
	return false
}

// Уведомление
type Notify struct {
	Title                string               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	User                 string               `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Notify) Reset()         { *m = Notify{} }
func (m *Notify) String() string { return proto.CompactTextString(m) }
func (*Notify) ProtoMessage()    {}
func (*Notify) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *Notify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notify.Unmarshal(m, b)
}
func (m *Notify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notify.Marshal(b, m, deterministic)
}
func (m *Notify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notify.Merge(m, src)
}
func (m *Notify) XXX_Size() int {
	return xxx_messageInfo_Notify.Size(m)
}
func (m *Notify) XXX_DiscardUnknown() {
	xxx_messageInfo_Notify.DiscardUnknown(m)
}

var xxx_messageInfo_Notify proto.InternalMessageInfo

func (m *Notify) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notify) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Notify) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

// Ответ с одним событием
type EventResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Detail               string   `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResponse) Reset()         { *m = EventResponse{} }
func (m *EventResponse) String() string { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()    {}
func (*EventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *EventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponse.Unmarshal(m, b)
}
func (m *EventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponse.Marshal(b, m, deterministic)
}
func (m *EventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponse.Merge(m, src)
}
func (m *EventResponse) XXX_Size() int {
	return xxx_messageInfo_EventResponse.Size(m)
}
func (m *EventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponse proto.InternalMessageInfo

func (m *EventResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *EventResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventResponse) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

// Ответ с масивом событий
type EventsResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Events               []*Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Detail               string   `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsResponse) Reset()         { *m = EventsResponse{} }
func (m *EventsResponse) String() string { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()    {}
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

func (m *EventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventsResponse.Unmarshal(m, b)
}
func (m *EventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventsResponse.Marshal(b, m, deterministic)
}
func (m *EventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsResponse.Merge(m, src)
}
func (m *EventsResponse) XXX_Size() int {
	return xxx_messageInfo_EventsResponse.Size(m)
}
func (m *EventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventsResponse proto.InternalMessageInfo

func (m *EventsResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *EventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventsResponse) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

// Запрос на удаление события
type EventIDRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventIDRequest) Reset()         { *m = EventIDRequest{} }
func (m *EventIDRequest) String() string { return proto.CompactTextString(m) }
func (*EventIDRequest) ProtoMessage()    {}
func (*EventIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{4}
}

func (m *EventIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventIDRequest.Unmarshal(m, b)
}
func (m *EventIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventIDRequest.Marshal(b, m, deterministic)
}
func (m *EventIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIDRequest.Merge(m, src)
}
func (m *EventIDRequest) XXX_Size() int {
	return xxx_messageInfo_EventIDRequest.Size(m)
}
func (m *EventIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventIDRequest proto.InternalMessageInfo

func (m *EventIDRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StatusResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Detail               string   `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{5}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *StatusResponse) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type PeriodRequest struct {
	Period               Periods              `protobuf:"varint,1,opt,name=period,proto3,enum=grpcserver.Periods" json:"period,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PeriodRequest) Reset()         { *m = PeriodRequest{} }
func (m *PeriodRequest) String() string { return proto.CompactTextString(m) }
func (*PeriodRequest) ProtoMessage()    {}
func (*PeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{6}
}

func (m *PeriodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodRequest.Unmarshal(m, b)
}
func (m *PeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodRequest.Marshal(b, m, deterministic)
}
func (m *PeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodRequest.Merge(m, src)
}
func (m *PeriodRequest) XXX_Size() int {
	return xxx_messageInfo_PeriodRequest.Size(m)
}
func (m *PeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodRequest proto.InternalMessageInfo

func (m *PeriodRequest) GetPeriod() Periods {
	if m != nil {
		return m.Period
	}
	return Periods_DAY
}

func (m *PeriodRequest) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func init() {
	proto.RegisterEnum("grpcserver.Periods", Periods_name, Periods_value)
	proto.RegisterType((*Event)(nil), "grpcserver.Event")
	proto.RegisterType((*Notify)(nil), "grpcserver.Notify")
	proto.RegisterType((*EventResponse)(nil), "grpcserver.EventResponse")
	proto.RegisterType((*EventsResponse)(nil), "grpcserver.EventsResponse")
	proto.RegisterType((*EventIDRequest)(nil), "grpcserver.EventIDRequest")
	proto.RegisterType((*StatusResponse)(nil), "grpcserver.StatusResponse")
	proto.RegisterType((*PeriodRequest)(nil), "grpcserver.PeriodRequest")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xdd, 0x6d, 0xbb, 0x6c, 0x5f, 0x43, 0xad, 0x03, 0x92, 0xed, 0x86, 0xe8, 0x66, 0x2f,
	0x54, 0x4c, 0x76, 0x03, 0xc6, 0x8b, 0x27, 0x95, 0x12, 0x35, 0x46, 0x34, 0x2b, 0x86, 0x60, 0xe2,
	0x61, 0x60, 0x1e, 0x30, 0x71, 0xd9, 0x5d, 0x67, 0xa6, 0x24, 0x86, 0x70, 0xf1, 0x2b, 0x78, 0xf6,
	0x53, 0x79, 0xf2, 0xee, 0x07, 0x31, 0x9d, 0x99, 0xb6, 0x40, 0xb1, 0xd5, 0x5b, 0xdf, 0xbe, 0xff,
	0xfc, 0x7f, 0x33, 0xff, 0xf7, 0x0a, 0x8b, 0xb4, 0xe2, 0x29, 0xad, 0x78, 0x52, 0x89, 0x52, 0x95,
	0x04, 0x8e, 0x45, 0x75, 0x28, 0x51, 0x9c, 0xa1, 0x08, 0xef, 0x1f, 0x97, 0xe5, 0x71, 0x8e, 0xa9,
	0xee, 0x1c, 0x0c, 0x8e, 0x52, 0xc5, 0x4f, 0x51, 0x2a, 0x7a, 0x5a, 0x19, 0x71, 0x78, 0xef, 0xba,
	0x80, 0x0d, 0x04, 0x55, 0xbc, 0x2c, 0x6c, 0x7f, 0xd5, 0xf6, 0x35, 0xa2, 0x28, 0x4a, 0xa5, 0x9b,
	0xd2, 0x74, 0xe3, 0x1f, 0x2e, 0x34, 0xb6, 0xcf, 0xb0, 0x50, 0xa4, 0x0d, 0x2e, 0x67, 0x81, 0x13,
	0x39, 0xbd, 0x5a, 0xe6, 0x72, 0x46, 0x96, 0xa1, 0xa1, 0xb8, 0xca, 0x31, 0x70, 0x23, 0xa7, 0xd7,
	0xcc, 0x4c, 0x41, 0x12, 0xa8, 0x33, 0xaa, 0x30, 0xa8, 0x45, 0x4e, 0xaf, 0xb5, 0x19, 0x26, 0xc6,
	0x3c, 0x19, 0xc1, 0x93, 0xdd, 0xd1, 0xed, 0x32, 0xad, 0x23, 0x8f, 0xc1, 0x1f, 0xdd, 0x27, 0xa8,
	0xeb, 0x33, 0xdd, 0xa9, 0x33, 0x7d, 0x2b, 0xc8, 0xc6, 0x52, 0xb2, 0x02, 0x1e, 0x1d, 0xa8, 0x93,
	0x52, 0x04, 0x0d, 0x4d, 0xb7, 0x15, 0x89, 0xa0, 0xc5, 0x50, 0x1e, 0x0a, 0x5e, 0x69, 0x47, 0x4f,
	0x37, 0x2f, 0x7f, 0x22, 0x1b, 0xe0, 0x15, 0xa5, 0xe2, 0x47, 0x5f, 0x83, 0x85, 0x79, 0x38, 0x2b,
	0x24, 0x21, 0xf8, 0x02, 0x4f, 0x79, 0xc1, 0x90, 0x05, 0x7e, 0xe4, 0xf4, 0xfc, 0x6c, 0x5c, 0xc7,
	0x07, 0xe0, 0xed, 0x18, 0xd5, 0x38, 0x0f, 0xe7, 0xa6, 0x3c, 0xdc, 0x7f, 0xcc, 0x83, 0x40, 0x7d,
	0x20, 0x51, 0xe8, 0xfc, 0x9a, 0x99, 0xfe, 0x1d, 0x9f, 0xc0, 0xa2, 0x1e, 0x41, 0x86, 0xb2, 0x2a,
	0x0b, 0x89, 0xc3, 0xd7, 0x4b, 0x45, 0xd5, 0x40, 0x6a, 0x96, 0x9f, 0xd9, 0x8a, 0xac, 0x41, 0x03,
	0x87, 0x42, 0x4b, 0xbb, 0x93, 0x4c, 0xf6, 0x24, 0x31, 0x0e, 0xa6, 0x3f, 0x34, 0x60, 0xa8, 0x28,
	0xcf, 0x2d, 0xc7, 0x56, 0xf1, 0x67, 0x68, 0x6b, 0x9d, 0x9c, 0x8b, 0x7a, 0x00, 0x9e, 0xb6, 0x92,
	0x81, 0x1b, 0xd5, 0x6e, 0x66, 0x59, 0xc1, 0x5f, 0x61, 0x91, 0x85, 0xbd, 0xea, 0x67, 0xf8, 0x65,
	0x80, 0x72, 0x6a, 0xc5, 0xe2, 0xa7, 0xd0, 0x7e, 0xaf, 0x71, 0x73, 0xaf, 0x33, 0x61, 0xb8, 0x57,
	0x18, 0x39, 0x2c, 0xbe, 0x43, 0xc1, 0x4b, 0x36, 0x42, 0x3c, 0x04, 0xaf, 0xd2, 0x1f, 0xb4, 0x41,
	0x7b, 0x73, 0xe9, 0xf2, 0xbd, 0x8d, 0x54, 0x66, 0x56, 0xf2, 0xbf, 0xc3, 0x5b, 0x5f, 0x83, 0x05,
	0x6b, 0x41, 0x16, 0xa0, 0xd6, 0x7f, 0xb6, 0xdf, 0xb9, 0x45, 0x7c, 0xa8, 0xef, 0x6d, 0x6f, 0xbf,
	0xee, 0x38, 0xa4, 0x09, 0x8d, 0x37, 0x6f, 0x77, 0x76, 0x5f, 0x76, 0xdc, 0xcd, 0x5f, 0x35, 0xf0,
	0xb7, 0x68, 0x8e, 0x05, 0xa3, 0x82, 0x64, 0xd0, 0xda, 0x12, 0x48, 0x15, 0x9a, 0xff, 0xd9, 0x74,
	0x92, 0x61, 0x77, 0x3a, 0x5c, 0x1b, 0x48, 0x7c, 0xf7, 0xdb, 0xcf, 0xdf, 0xdf, 0xdd, 0xdb, 0x31,
	0xa4, 0x67, 0x1b, 0xa9, 0x09, 0xfc, 0x89, 0xb3, 0x4e, 0xf6, 0xa0, 0xf5, 0xa1, 0x62, 0xb3, 0x3c,
	0xc3, 0xcb, 0x9f, 0xae, 0xa6, 0x1c, 0x77, 0xb5, 0xe9, 0x52, 0xdc, 0x1e, 0x9b, 0xa6, 0xe7, 0x9c,
	0x5d, 0x0c, 0x8d, 0x3f, 0x41, 0xab, 0x8f, 0x39, 0x8e, 0x8c, 0xc3, 0x29, 0xe3, 0xf1, 0x34, 0x67,
	0x12, 0x56, 0x34, 0xa1, 0xb3, 0x7e, 0x8d, 0x40, 0x8e, 0xa0, 0xf9, 0x02, 0x95, 0xd9, 0x41, 0xd2,
	0x9d, 0x9e, 0xcd, 0x8d, 0xde, 0x57, 0x57, 0x36, 0x8e, 0xb5, 0xf7, 0x2a, 0x09, 0x27, 0x91, 0xa4,
	0xe7, 0x66, 0xa2, 0x17, 0xe9, 0xf9, 0x30, 0x94, 0x0b, 0xb2, 0x0f, 0xfe, 0x88, 0x33, 0xf3, 0x0d,
	0x33, 0x92, 0xb7, 0x4f, 0x20, 0xd7, 0x9e, 0xf0, 0x7c, 0xe5, 0xe3, 0x72, 0xca, 0x0b, 0x85, 0xa2,
	0xa0, 0x79, 0x3a, 0x39, 0x7d, 0xe0, 0xe9, 0xb5, 0x79, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd3,
	0x07, 0xd2, 0x3e, 0xcc, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	// Создание события
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error)
	// Обновление события
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StatusResponse, error)
	// Удаление события
	DeleteEvent(ctx context.Context, in *EventIDRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Список событий
	GetEvents(ctx context.Context, in *PeriodRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	// Событие
	GetEvent(ctx context.Context, in *EventIDRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type calendarClient struct {
	cc *grpc.ClientConn
}

func NewCalendarClient(cc *grpc.ClientConn) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.Calendar/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.Calendar/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *EventIDRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEvents(ctx context.Context, in *PeriodRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.Calendar/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEvent(ctx context.Context, in *EventIDRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.Calendar/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	// Создание события
	CreateEvent(context.Context, *Event) (*EventResponse, error)
	// Обновление события
	UpdateEvent(context.Context, *Event) (*StatusResponse, error)
	// Удаление события
	DeleteEvent(context.Context, *EventIDRequest) (*StatusResponse, error)
	// Список событий
	GetEvents(context.Context, *PeriodRequest) (*EventsResponse, error)
	// Событие
	GetEvent(context.Context, *EventIDRequest) (*EventResponse, error)
}

// UnimplementedCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (*UnimplementedCalendarServer) CreateEvent(ctx context.Context, req *Event) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedCalendarServer) UpdateEvent(ctx context.Context, req *Event) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedCalendarServer) DeleteEvent(ctx context.Context, req *EventIDRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedCalendarServer) GetEvents(ctx context.Context, req *PeriodRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedCalendarServer) GetEvent(ctx context.Context, req *EventIDRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.Calendar/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.Calendar/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*EventIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.Calendar/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEvents(ctx, req.(*PeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.Calendar/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEvent(ctx, req.(*EventIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Calendar_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Calendar_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Calendar_GetEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Calendar_GetEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/claendar_domain.go

// Package calendar is a generated GoMock package.
package calendar

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/ios116/calendar/internal/domain"
	reflect "reflect"
	time "time"
)

// MockEventRepository is a mock of EventRepository interface
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// AddEvent mocks base method
func (m *MockEventRepository) AddEvent(event *domain.Event) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", event)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEvent indicates an expected call of AddEvent
func (mr *MockEventRepositoryMockRecorder) AddEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockEventRepository)(nil).AddEvent), event)
}

// EditEvent mocks base method
func (m *MockEventRepository) EditEvent(event *domain.Event) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEvent", event)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditEvent indicates an expected call of EditEvent
func (mr *MockEventRepositoryMockRecorder) EditEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEvent", reflect.TypeOf((*MockEventRepository)(nil).EditEvent), event)
}

// DeleteEvent mocks base method
func (m *MockEventRepository) DeleteEvent(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockEventRepositoryMockRecorder) DeleteEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepository)(nil).DeleteEvent), id)
}

// GetEventByID mocks base method
func (m *MockEventRepository) GetEventByID(id int64) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", id)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID
func (mr *MockEventRepositoryMockRecorder) GetEventByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventRepository)(nil).GetEventByID), id)
}

// SelectEventsByDatePeriod mocks base method
func (m *MockEventRepository) SelectEventsByDatePeriod(pr *domain.PeriodWithDate) ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEventsByDatePeriod", pr)
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEventsByDatePeriod indicates an expected call of SelectEventsByDatePeriod
func (mr *MockEventRepositoryMockRecorder) SelectEventsByDatePeriod(pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEventsByDatePeriod", reflect.TypeOf((*MockEventRepository)(nil).SelectEventsByDatePeriod), pr)
}

// EventReminders mocks base method
func (m *MockEventRepository) EventReminders(date time.Time) ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventReminders", date)
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventReminders indicates an expected call of EventReminders
func (mr *MockEventRepositoryMockRecorder) EventReminders(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventReminders", reflect.TypeOf((*MockEventRepository)(nil).EventReminders), date)
}
